{"version":3,"sources":["assets/imgs/Star_Wars_logo.svg","assets/imgs/falcon.png","assets/imgs/lightsaber.svg","components/layout/Navbar.js","components/layout/Section.js","components/layout/Hero.js","components/layout/Footer.js","context/PowerReducer.js","context/types.js","utils/fetchData.js","context/PowerState.js","utils/toggleState.js","components/layout/Status.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","to","Section","Hero","Footer","state","action","type","payload","a","query","uri","fetch","response","json","charging_status","powerContext","createContext","PowerState","props","useReducer","PowerReducer","falcon","lightsaber","dispatch","changeData","kind","fetchData","data","Provider","value","loadPower","setInterval","children","initailVal","useState","val","setVal","toggleState","Status","useContext","falconClass","setFalconClass","lightsaberClass","setLightsaberClass","useEffect","addClassFalcon","addClassLightsaber","onClick","falconPng","lightsaberPng","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13e27d71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Star_Wars_logo.c41f740a.svg\";","module.exports = __webpack_public_path__ + \"static/media/falcon.50e2f42a.png\";","module.exports = __webpack_public_path__ + \"static/media/lightsaber.7c5a6f87.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport logo from \"../../assets/imgs/Star_Wars_logo.svg\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"padding\">\n      <div className=\"nav-left\">\n        <img src={logo} alt=\"Star Wars\" />\n      </div>\n      <ul className=\"nav-right\">\n        <li>\n          <Link className=\"btn\" to=\"/\">\n            HOME\n          </Link>\n        </li>\n        <li>\n          <Link className=\"btn\" to=\"/status\">\n            STATUS\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Section = () => {\n  return (\n    <section className=\"columns padding\">\n      <div className=\"columns-item \">\n        <h2 className=\"my-1\">Obi-Wan Kenobi</h2>\n        <i className=\"fas fa-jedi my-1\"></i>\n        <q>\n          Well, if droids could think, there’d be none of us here, would there?\n        </q>\n      </div>\n      <div className=\"columns-item\">\n        <h2 className=\"my-1\">Qui-Gon Jinn</h2>\n        <i className=\"fas fa-jedi my-1\"></i>\n        <q>Your focus determines your reality</q>\n      </div>\n      <div className=\"columns-item\">\n        <h2 className=\"my-1\">Jango Fett</h2>\n        <i className=\"fas fa-jedi my-1\"></i>\n        <q>I’m just a simple man trying to make my way in the universe.</q>\n      </div>\n    </section>\n  );\n};\n\nexport default Section;\n","import React from \"react\";\n\nimport Section from \"./Section\";\n\nconst Hero = () => {\n  return (\n    <>\n      <section className=\"hero\">\n        <h1>\n          <span>power</span> <span>source</span>\n        </h1>\n      </section>\n      <Section />\n    </>\n  );\n};\n\nexport default Hero;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"padding\">\n      <p className=\"padding my-1\">All rights reserved... or not.</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { ADD_POWER } from \"./types\";\n\nexport default (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ADD_POWER:\n      return {\n        ...payload\n      };\n    default:\n      return state;\n  }\n};\n","export const ADD_POWER = \"ADD_POWER\";\n","export default async (query = \"\") => {\n  const uri = \"https://challenge.codetain.com/api/v1/charging_status\";\n  let response;\n  if (query === \"\") {\n    response = await fetch(uri);\n  } else {\n    response = await fetch(uri + `?priority=${query}`);\n  }\n  const { charging_status } = await response.json();\n  return charging_status;\n};\n","import React, { useReducer, createContext } from \"react\";\nimport PowerReducer from \"./PowerReducer\";\nimport { ADD_POWER } from \"./types\";\nimport fetchData from \"../utils/fetchData\";\n\nexport const powerContext = createContext();\n\nconst PowerState = props => {\n  const initailState = {\n    falcon: 0,\n    lightsaber: 0\n  };\n  const [state, dispatch] = useReducer(PowerReducer, initailState);\n  const changeData = async kind => {\n    const data = await fetchData(kind);\n    dispatch({ type: ADD_POWER, payload: data });\n  };\n  const loadPower = () => {\n    setInterval(async () => {\n      const data = await fetchData();\n      dispatch({ type: ADD_POWER, payload: data });\n    }, 10000);\n  };\n  return (\n    <powerContext.Provider\n      value={{\n        falcon: state.falcon,\n        lightsaber: state.lightsaber,\n        changeData,\n        loadPower\n      }}\n    >\n      {props.children}\n    </powerContext.Provider>\n  );\n};\nexport default PowerState;\n","import { useState } from \"react\";\n\nexport default (initailVal = false) => {\n  const [val, setVal] = useState(initailVal);\n  const toggleState = () => setVal(!val);\n  return [val, toggleState];\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { powerContext } from \"../../context/PowerState\";\nimport toggleState from \"../../utils/toggleState\";\nimport falconPng from \"../../assets/imgs/falcon.png\";\nimport lightsaberPng from \"../../assets/imgs/lightsaber.svg\";\n\nconst Status = () => {\n  const { falcon, lightsaber, changeData, loadPower } = useContext(\n    powerContext\n  );\n  const [falconClass, setFalconClass] = toggleState();\n  const [lightsaberClass, setLightsaberClass] = toggleState();\n\n  const handleFalconClick = () => {\n    changeData(\"falcon\");\n    setFalconClass();\n  };\n  const handleLightsaberClick = () => {\n    changeData(\"lightsaber\");\n    setLightsaberClass();\n  };\n  useEffect(() => {\n    loadPower();\n    // eslint-disable-next-line\n  }, []);\n\n  const addClassFalcon = `${\n    falcon !== 0 ? \"status-images  status-image__border\" : \"status-images\"\n  } ${falconClass ? \"status-images_bg\" : \"\"}`;\n\n  const addClassLightsaber = `${\n    lightsaber !== 0 ? \"status-images  status-image__border\" : \"status-images\"\n  } ${lightsaberClass ? \"status-images_bg\" : \"\"}`;\n\n  return (\n    <section className=\"status\">\n      <div className=\"status-container\">\n        <h1 className=\"my-1\">\n          TOTAL POWER:{\" \"}\n          <span className=\"status-number\">{falcon + lightsaber}</span> kW\n        </h1>\n        <div className=\"status-image\">\n          <div onClick={handleFalconClick} className={addClassFalcon}>\n            <img src={falconPng} alt=\"Millennium Falcon\" />\n          </div>\n          <div onClick={handleLightsaberClick} className={addClassLightsaber}>\n            <img src={lightsaberPng} alt=\"Lightsaber\" />\n          </div>\n        </div>\n        <div className=\"status-values\">\n          <h2 className=\"my-1\">\n            <span className=\"status-number\">{falcon}</span> kW{\" \"}\n          </h2>\n          <h2 className=\"my-1\">\n            <span className=\"status-number\">{lightsaber}</span> kW\n          </h2>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Status;\n","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Hero from \"./components/layout/Hero\";\nimport Footer from \"./components/layout/Footer\";\nimport Status from \"./components/layout/Status\";\nimport PowerState from \"./context/PowerState\";\n\nfunction App() {\n  return (\n    <PowerState>\n      <HashRouter basename=\"/\">\n        <div>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Hero} />\n            <Route exact path=\"/status\" component={Status} />\n          </Switch>\n          <Footer />\n        </div>\n      </HashRouter>\n    </PowerState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}